"""
3. Создайте собственный класс-исключение, который должен проверять
содержимое списка на наличие только чисел. Проверить работу исключения
на реальном примере. Необходимо запрашивать у пользователя данные и
заполнять список. Класс-исключение должен контролировать типы данных
элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
пока пользователь сам не остановит работу скрипта, введя, например,
команду “stop”. При этом скрипт завершается, сформированный список
выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить
только числа и строки. При вводе пользователем очередного элемента необходимо
реализовать проверку типа элемента и вносить его в список,
только если введено число. Класс-исключение должен не позволить
пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
"""


class ExceptionError(Exception):
    def __init__(self):
        pass


class InitForInt:

    def __init__(self):
        self.user_list = []

    def take_str(self):
        while True:
            try:
                try:
                    user_str = int(input('Введите число для добавления в список. Для выхода введите stop: '))
                    self.user_list.append(user_str)
                    print(f'Текущий список: {self.user_list}')
                except ValueError as e:
                    raise ExceptionError
            except ExceptionError:
                user_str = input('Вы ввели не число. \nДля выхода введите stop\n'
                                 'Для продолжения нажмите Enter')
                if user_str == 'stop':
                    print(f'Ваш список: {self.user_list}')
                    break
                else:
                    self.take_str()


start = InitForInt()
start.take_str()
